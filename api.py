"""
API FastAPI para o modelo Kickstarter Success Predictor

Para executar em produ√ß√£o (ex: no Render):
1. Certifique-se que o arquivo 'kickstarter_model_v1.pkl' e 'ml_classes.py' existem.
2. Use o comando de in√≠cio: uvicorn api:app --host 0.0.0.0 --port 10000
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field, validator
from typing import List, Optional
from datetime import datetime
import joblib
import pandas as pd
import numpy as np
import os
from ml_classes import KickstarterPreprocessor, KickstarterPredictor

# =====================================================
# CONFIGURA√á√ÉO DA API
# =====================================================

app = FastAPI(
    title="Kickstarter Success Predictor API",
    description="API para prever sucesso de projetos no Kickstarter usando Machine Learning",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especifique os dom√≠nios
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# =====================================================
# MODELOS DE DADOS (SCHEMAS)
# =====================================================

class ProjectInput(BaseModel):
    """Schema para entrada de dados de um projeto"""
    
    name: str = Field(
        ..., 
        description="Nome/t√≠tulo do projeto",
        example="Amazing Solar-Powered Backpack"
    )
    
    main_category: str = Field(
        ...,
        description="Categoria principal do projeto",
        example="Technology"
    )
    
    country: str = Field(
        ...,
        description="C√≥digo do pa√≠s (2 letras)",
        example="US"
    )
    
    usd_goal_real: float = Field(
        ...,
        description="Meta em d√≥lares americanos (USD)",
        example=15000.0,
        gt=0,
        le=100000000
    )
    
    launched: str = Field(
        ...,
        description="Data de lan√ßamento (YYYY-MM-DD)",
        example="2024-03-01"
    )
    
    deadline: str = Field(
        ...,
        description="Data limite (YYYY-MM-DD)",
        example="2024-03-31"
    )
    
    @validator('country')
    def validate_country(cls, v):
        if len(v) != 2:
            raise ValueError('Pa√≠s deve ter c√≥digo de 2 letras (ex: US, GB, BR)')
        return v.upper()
    
    @validator('main_category')
    def validate_category(cls, v):
        valid_categories = [
            'Film & Video', 'Music', 'Publishing', 'Games', 'Technology',
            'Design', 'Art', 'Comics', 'Theater', 'Food', 'Photography',
            'Fashion', 'Dance', 'Journalism', 'Crafts'
        ]
        if v not in valid_categories:
            raise ValueError(f'Categoria inv√°lida. Use uma das: {", ".join(valid_categories)}')
        return v
    
    @validator('deadline')
    def validate_dates(cls, v, values):
        if 'launched' in values:
            try:
                launched_date = datetime.strptime(values['launched'], '%Y-%m-%d')
                deadline_date = datetime.strptime(v, '%Y-%m-%d')
                
                if deadline_date <= launched_date:
                    raise ValueError('Deadline deve ser ap√≥s a data de lan√ßamento')
                
                days_diff = (deadline_date - launched_date).days
                if days_diff > 365:
                    raise ValueError('Campanha n√£o pode durar mais de 365 dias')
                if days_diff < 1:
                    raise ValueError('Campanha deve durar pelo menos 1 dia')
                    
            except ValueError as e:
                if "time data" in str(e):
                    raise ValueError('Data deve estar no formato YYYY-MM-DD')
                raise
        return v


class PredictionOutput(BaseModel):
    """Schema para resposta da predi√ß√£o"""
    
    success_probability: float = Field(..., description="Probabilidade de sucesso (0.0 a 1.0)")
    prediction: str = Field(..., description="Predi√ß√£o final: 'Sucesso' ou 'Falha'")
    confidence: str = Field(..., description="N√≠vel de confian√ßa: 'Alta', 'M√©dia' ou 'Baixa'")
    recommendations: List[str] = Field(..., description="Lista de recomenda√ß√µes personalizadas")
    threshold_used: float = Field(..., description="Threshold usado para classifica√ß√£o")
    
    class Config:
        schema_extra = {
            "example": {
                "success_probability": 0.743,
                "prediction": "Sucesso",
                "confidence": "Alta",
                "recommendations": [
                    "‚úÖ Meta dentro da faixa recomendada.",
                    "‚úÖ Dura√ß√£o adequada da campanha.",
                    "üåü Excelentes chances! Foque na execu√ß√£o."
                ],
                "threshold_used": 0.317
            }
        }


class BatchInput(BaseModel):
    """Schema para predi√ß√£o em lote"""
    projects: List[ProjectInput]


class ModelInfo(BaseModel):
    """Schema para informa√ß√µes do modelo"""
    version: str
    training_date: str
    metrics: dict
    features_used: List[str]
    threshold: float


class HealthCheck(BaseModel):
    """Schema para health check"""
    status: str
    model_loaded: bool
    timestamp: str


# =====================================================
# CARREGAR MODELO
# =====================================================

MODEL_PATH = 'kickstarter_model_v1.pkl'
model_data = None
predictor = None

def load_model():
    """Carrega o modelo do disco"""
    global model_data, predictor
    
    if not os.path.exists(MODEL_PATH):
        raise FileNotFoundError(
            f"Modelo n√£o encontrado em '{MODEL_PATH}'. "
            "Execute o script de treinamento primeiro."
        )
    
    print(f"Carregando modelo de '{MODEL_PATH}'...")
    model_data = joblib.load(MODEL_PATH)
    
    predictor = KickstarterPredictor(
        model=model_data['model'],
        preprocessor=model_data['preprocessor'],
        threshold=model_data['optimal_threshold']
    )
    
    print(f"‚úì Modelo carregado com sucesso!")
    print(f"  Vers√£o: {model_data['version']}")
    print(f"  Treinado em: {model_data['training_date']}")
    print(f"  AUC-ROC: {model_data['metrics']['auc_roc']:.4f}")

# Tentar carregar modelo ao iniciar a aplica√ß√£o
@app.on_event("startup")
async def startup_event():
    try:
        load_model()
    except Exception as e:
        print(f"‚ö†Ô∏è Erro CR√çTICO ao carregar modelo na inicializa√ß√£o: {e}")
        # Em um app real, voc√™ poderia decidir se a API deve ou n√£o iniciar sem o modelo.
        # Por enquanto, apenas logamos o erro. O endpoint de health check ir√° falhar.
        pass

# =====================================================
# ENDPOINTS DA API
# =====================================================

@app.get("/", tags=["Root"])
async def root():
    """Endpoint raiz com informa√ß√µes b√°sicas"""
    return {
        "message": "Kickstarter Success Predictor API",
        "version": "1.0.0",
        "status": "online" if predictor else "modelo n√£o carregado",
        "endpoints": {
            "documenta√ß√£o_interativa": "/docs",
            "documenta√ß√£o_alternativa": "/redoc",
            "fazer_predi√ß√£o": "/predict",
            "predi√ß√£o_em_lote": "/predict/batch",
            "informa√ß√µes_do_modelo": "/info/model",
            "categorias_v√°lidas": "/info/categories",
            "pa√≠ses_suportados": "/info/countries",
            "health_check": "/health"
        }
    }


@app.get("/health", response_model=HealthCheck, tags=["Health"])
async def health_check():
    """Verifica se a API e o modelo est√£o funcionando"""
    is_model_loaded = predictor is not None
    return {
        "status": "healthy" if is_model_loaded else "unhealthy",
        "model_loaded": is_model_loaded,
        "timestamp": datetime.now().isoformat()
    }


@app.post("/predict", response_model=PredictionOutput, tags=["Prediction"])
async def predict_project(project: ProjectInput):
    """
    Faz predi√ß√£o para um √∫nico projeto Kickstarter.
    """
    if not predictor:
        raise HTTPException(
            status_code=503,
            detail="Modelo n√£o est√° carregado. Verifique os logs do servidor."
        )
    
    try:
        project_data = project.dict()
        result = predictor.predict_single(project_data)
        return result
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Erro ao fazer predi√ß√£o: {str(e)}"
        )


@app.post("/predict/batch", tags=["Prediction"])
async def predict_batch(batch: BatchInput):
    """
    Faz predi√ß√£o para m√∫ltiplos projetos de uma vez.
    """
    if not predictor:
        raise HTTPException(
            status_code=503,
            detail="Modelo n√£o est√° carregado."
        )
    
    results = []
    
    for project in batch.projects:
        try:
            project_data = project.dict()
            result = predictor.predict_single(project_data)
            
            results.append({
                "project_name": project.name,
                "success": True,
                "result": result
            })
            
        except Exception as e:
            results.append({
                "project_name": project.name,
                "success": False,
                "error": str(e)
            })
    
    successful = sum(1 for r in results if r['success'])
    
    return {
        "total_projects": len(batch.projects),
        "successful_predictions": successful,
        "failed_predictions": len(batch.projects) - successful,
        "results": results
    }


@app.get("/info/model", response_model=ModelInfo, tags=["Information"])
async def get_model_info():
    """Retorna informa√ß√µes detalhadas sobre o modelo"""
    if not model_data:
        raise HTTPException(
            status_code=503,
            detail="Modelo n√£o est√° carregado"
        )
    
    return {
        "version": model_data['version'],
        "training_date": model_data['training_date'],
        "metrics": model_data['metrics'],
        "features_used": model_data['feature_names'],
        "threshold": model_data['optimal_threshold']
    }


@app.get("/info/categories", tags=["Information"])
async def get_categories():
    """Lista todas as categorias v√°lidas com estat√≠sticas"""
    return {
        "total": 15,
        "categories": [
            {"value": "Film & Video", "description": "Filmes, document√°rios, v√≠deos", "avg_success": "42%"},
            {"value": "Music", "description": "√Ålbuns, shows, instrumentos", "avg_success": "53%"},
            {"value": "Publishing", "description": "Livros, revistas, e-books", "avg_success": "35%"},
            {"value": "Games", "description": "Jogos de tabuleiro, card games, RPG", "avg_success": "44%"},
            {"value": "Technology", "description": "Gadgets, apps, hardware", "avg_success": "24%"},
            {"value": "Design", "description": "Produtos, m√≥veis, acess√≥rios", "avg_success": "42%"},
            {"value": "Art", "description": "Pinturas, esculturas, instala√ß√µes", "avg_success": "45%"},
            {"value": "Comics", "description": "HQs, graphic novels, mang√°s", "avg_success": "59%"},
            {"value": "Theater", "description": "Pe√ßas, musicais, performances", "avg_success": "64%"},
            {"value": "Food", "description": "Restaurantes, produtos aliment√≠cios", "avg_success": "28%"},
            {"value": "Photography", "description": "Projetos fotogr√°ficos, livros de fotos", "avg_success": "34%"},
            {"value": "Fashion", "description": "Roupas, cal√ßados, acess√≥rios", "avg_success": "28%"},
            {"value": "Dance", "description": "Espet√°culos, workshops, v√≠deos", "avg_success": "65%"},
            {"value": "Journalism", "description": "Reportagens, document√°rios jornal√≠sticos", "avg_success": "24%"},
            {"value": "Crafts", "description": "Artesanato, DIY, kits", "avg_success": "27%"}
        ]
    }


@app.get("/info/countries", tags=["Information"])
async def get_countries():
    """Lista pa√≠ses suportados pelo modelo"""
    return {
        "total": 22,
        "main_countries": {
            "US": "Estados Unidos (70% dos projetos)",
            "GB": "Reino Unido (8% dos projetos)",
            "CA": "Canad√° (4% dos projetos)",
            "AU": "Austr√°lia (3% dos projetos)"
        },
        "all_countries": {
            "US": "Estados Unidos",
            "GB": "Reino Unido",
            "CA": "Canad√°",
            "AU": "Austr√°lia",
            "DE": "Alemanha",
            "FR": "Fran√ßa",
            "IT": "It√°lia",
            "ES": "Espanha",
            "NL": "Pa√≠ses Baixos",
            "SE": "Su√©cia",
            "NO": "Noruega",
            "DK": "Dinamarca",
            "IE": "Irlanda",
            "BE": "B√©lgica",
            "CH": "Su√≠√ßa",
            "AT": "√Åustria",
            "NZ": "Nova Zel√¢ndia",
            "SG": "Singapura",
            "HK": "Hong Kong",
            "JP": "Jap√£o",
            "MX": "M√©xico",
            "BR": "Brasil"
        }
    }

# (O restante dos endpoints de exemplo foram omitidos por brevidade, mas podem ser mantidos se desejar)
